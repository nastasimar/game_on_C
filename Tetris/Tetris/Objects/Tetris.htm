<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Tetris.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Tetris.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Jan 10 20:14:26 2023
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; movRotate &rArr; rotateArray_CW
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[26]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1a]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1d]">BACKUP_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[d]">CAN1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[e]">CAN2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1b]">COMPARATOR_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[10]">DMA_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1e]">EXT_INT1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1f]">EXT_INT2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[20]">EXT_INT3_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[21]">EXT_INT4_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[14]">I2C_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[15]">POWER_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[24]">Reset_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[13]">SSP1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[1c]">SSP2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_mdr32f9qx.o(i.SystemInit) referenced from startup_mdr32f9qx.o(.text)
 <LI><a href="#[17]">Timer1_IRQHandler</a> from main.o(i.Timer1_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[18]">Timer2_IRQHandler</a> from main.o(i.Timer2_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[19]">Timer3_IRQHandler</a> from main.o(i.Timer3_IRQHandler) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[11]">UART1_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[12]">UART2_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[f]">USB_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_mdr32f9qx.o(.text) referenced from startup_mdr32f9qx.o(RESET)
 <LI><a href="#[25]">__main</a> from __main.o(!!!main) referenced from startup_mdr32f9qx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[70]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[71]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[72]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[73]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[74]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[75]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[76]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[77]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[78]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[79]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[80]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[81]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[82]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[83]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[84]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[85]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[86]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[87]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[88]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[89]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[8a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[8b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[8d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[8f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[90]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[91]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; movRotate &rArr; rotateArray_CW
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[92]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[36]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[31]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[93]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[33]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[24]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BACKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>COMPARATOR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>POWER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mdr32f9qx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mdr32f9qx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRight
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movLeft
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movDown
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScore
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[30]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[9f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>InitLcd</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.InitLcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitLcd &rArr; LCDON
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCMD
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDON
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>LCDON</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.LCDON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCDON
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLcd
</UL>

<P><STRONG><a name="[38]"></a>ReadCMD</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.ReadCMD))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLcd
</UL>

<P><STRONG><a name="[3b]"></a>ScreenUpdate</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, main.o(i.ScreenUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ScreenUpdate &rArr; SetPage
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>Send_Data</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(i.Send_Data))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lcd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenUpdate
</UL>

<P><STRONG><a name="[3c]"></a>SetAddr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, main.o(i.SetAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenUpdate
</UL>

<P><STRONG><a name="[3d]"></a>SetPage</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(i.SetPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetPage
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lcd
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenUpdate
</UL>

<P><STRONG><a name="[3f]"></a>StartScreen</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, main.o(i.StartScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StartScreen &rArr; drawScuare
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScuare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, system_mdr32f9qx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, system_mdr32f9qx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>Timer1_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, main.o(i.Timer1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Timer1_IRQHandler &rArr; showScore &rArr; drawScuare
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScore
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLines
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLevel
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeFigure
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mixLayer
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameField
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenUpdate
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Timer2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.Timer2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Timer3_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, main.o(i.Timer3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Timer3_IRQHandler &rArr; movDown &rArr; isCollision
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movDown
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;levelToFreq
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mdr32f9qx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>WriteCMD</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(i.WriteCMD))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddr
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDON
</UL>

<P><STRONG><a name="[4a]"></a>checkLevel</STRONG> (Thumb, 376 bytes, Stack size 0 bytes, main.o(i.checkLevel))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>checkTetris</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, main.o(i.checkTetris))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = checkTetris
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>clearPrimitive</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, main.o(i.clearPrimitive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clearPrimitive
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawOneFig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameField
</UL>

<P><STRONG><a name="[5e]"></a>clearScuare</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, main.o(i.clearScuare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = clearScuare
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>clear_array</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.clear_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>clear_lcd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.clear_lcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = clear_lcd &rArr; SetPage
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>deleteLines</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, main.o(i.deleteLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = deleteLines
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>drawGameField</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, main.o(i.drawGameField))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = drawGameField &rArr; drawPrimitive
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPrimitive
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearPrimitive
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>drawNum</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, main.o(i.drawNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drawNum
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScore
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLines
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLevel
</UL>

<P><STRONG><a name="[4f]"></a>drawOneFig</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, main.o(i.drawOneFig))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = drawOneFig &rArr; drawPrimitive
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPrimitive
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearPrimitive
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>drawPrimitive</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, main.o(i.drawPrimitive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drawPrimitive
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawOneFig
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameField
</UL>

<P><STRONG><a name="[40]"></a>drawScuare</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, main.o(i.drawScuare))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = drawScuare
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScore
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLines
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLevel
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScreen
</UL>

<P><STRONG><a name="[51]"></a>generateFigure</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, main.o(i.generateFigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = generateFigure &rArr; initFigure_model &rArr; minBottom
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFigure_model
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>initButtons</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, main.o(i.initButtons))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>initFigure_coord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.initFigure_coord))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>initFigure_model</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, main.o(i.initFigure_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = initFigure_model &rArr; minBottom
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minLeft
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minBottom
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxTop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxRight
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFigure
</UL>

<P><STRONG><a name="[57]"></a>initPerefirial</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, main.o(i.initPerefirial))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>initTimer_1</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.initTimer_1))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>initTimer_2</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(i.initTimer_2))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>initTimer_3</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.initTimer_3))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>isCollision</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(i.isCollision))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isCollision
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRight
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movLeft
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movDown
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>levelToFreq</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, main.o(i.levelToFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_IRQHandler
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 2454 bytes, Stack size 80 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = main &rArr; movRotate &rArr; rotateArray_CW
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3Off
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1Off
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showScore
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLines
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLevel
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFigure
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeFigure
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picToArray_half
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picToArray_full
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRight
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movLeft
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movDown
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;levelToFreq
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCollision
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer_3
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer_2
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer_1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPerefirial
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFigure_model
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFigure_coord
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initButtons
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateFigure
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScuare
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawOneFig
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deleteLines
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lcd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_array
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearScuare
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkTetris
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkLevel
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartScreen
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAddr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScreenUpdate
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLcd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[50]"></a>max</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.max))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateArray_CW
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateArray_ACW
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawOneFig
</UL>

<P><STRONG><a name="[53]"></a>maxRight</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, main.o(i.maxRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = maxRight
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFigure_model
</UL>

<P><STRONG><a name="[56]"></a>maxTop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.maxTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = maxTop
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFigure_model
</UL>

<P><STRONG><a name="[6c]"></a>min</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.min))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picToArray_half
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picToArray_full
</UL>

<P><STRONG><a name="[55]"></a>minBottom</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.minBottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = minBottom
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFigure_model
</UL>

<P><STRONG><a name="[54]"></a>minLeft</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, main.o(i.minLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = minLeft
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initFigure_model
</UL>

<P><STRONG><a name="[44]"></a>mixLayer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(i.mixLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mixLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[49]"></a>movDown</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, main.o(i.movDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = movDown &rArr; isCollision
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCollision
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>movLeft</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, main.o(i.movLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = movLeft &rArr; isCollision
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCollision
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>movRight</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, main.o(i.movRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = movRight &rArr; isCollision
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCollision
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>movRotate</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, main.o(i.movRotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = movRotate &rArr; rotateArray_CW
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateArray_CW
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotateArray_ACW
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minLeft
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minBottom
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxTop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxRight
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isCollision
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>picToArray_full</STRONG> (Thumb, 156 bytes, Stack size 52 bytes, main.o(i.picToArray_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = picToArray_full
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>picToArray_half</STRONG> (Thumb, 164 bytes, Stack size 52 bytes, main.o(i.picToArray_half))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = picToArray_half
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;min
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>placeFigure</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, main.o(i.placeFigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = placeFigure
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>rotateArray_ACW</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, main.o(i.rotateArray_ACW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rotateArray_ACW
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
</UL>

<P><STRONG><a name="[6a]"></a>rotateArray_CW</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, main.o(i.rotateArray_CW))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rotateArray_CW
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;max
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movRotate
</UL>

<P><STRONG><a name="[65]"></a>saveFigure</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, main.o(i.saveFigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = saveFigure
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>showLevel</STRONG> (Thumb, 324 bytes, Stack size 36 bytes, main.o(i.showLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = showLevel &rArr; drawScuare
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScuare
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNum
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>showLines</STRONG> (Thumb, 366 bytes, Stack size 44 bytes, main.o(i.showLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = showLines &rArr; drawScuare
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScuare
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNum
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>showScore</STRONG> (Thumb, 398 bytes, Stack size 56 bytes, main.o(i.showScore))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = showScore &rArr; drawScuare
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScuare
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNum
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>timer1Off</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.timer1Off))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>timer3Off</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.timer3Off))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
